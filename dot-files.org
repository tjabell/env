;;-*- coding: utf-8; lexical-binding: t; -*-
#+title: Dot Files Configuration
#+STARTUP: overview
* Dot files configuration

Not quite sure what I will do with this yet, but getting started with centralizing configuration here

* Qutebrowser

** Configuration
#+begin_src python :tangle ~/.config/qutebrowser/config.py
  # qutebrowser - a simple, preconfigured Emacs binding set for qutebrowser
  #
  # The aim of this binding set is not to provide bindings for absolutely
  # everything, but to provide a stable launching point for people to make their
  # own bindings.
  #
  # Installation:
  #
  #  1. Copy this file or add this repo as a submodule to your dotfiles.
  #  2. Add this line to your config.py, and point the path to this file:
  # config.source('qutemacs/qutemacs.py')
  config = config  # type: ConfigAPI # noqa: F821 pylint: disable=E0602,C0103
  c = c  # type: ConfigContainer # noqa: F821 pylint: disable=E0602,C0103

  # c.input.insert_mode.auto_enter = False
  # c.input.insert_mode.auto_leave = False
  c.input.insert_mode.plugins = True
  c.input.insert_mode.auto_load = True

  # Forward unbound keys
  c.input.forward_unbound_keys = "all"

  ESC_BIND = 'clear-keychain ;; search ;; fullscreen --leave'

  c.bindings.default['normal'] = {}
  # Bindings
  c.bindings.commands['normal'] = {
      # Navigation
      '<ctrl-v>': 'scroll-page 0 0.9',
      '<alt-v>': 'scroll-page 0 -0.9',
      '<Backspace>': 'scroll-page 0 -0.9',
      # '<Space>': 'scroll-page 0 0.9',
      '<alt-shift-.': 'scroll-to-perc',
      '<alt-shift-.>': 'scroll-to-perc 0',


      # Commands
      '<alt-x>': 'set-cmd-text :',
      '<ctrl-x><ctrl-c>': 'quit',

      # searching
      '<ctrl-s>': 'set-cmd-text /',
      '<ctrl-r>': 'set-cmd-text ?',

      # hinting
      '<f>': 'hint all',
      '<ctrl-u><f>': 'hint all hover',
      '<shift-f>': 'hint all tab-bg',
      '<ctrl-u><shift-e>': 'hint all tab-fg',
      '<w><l>': 'hint all yank-primary',
      '<w><w>': 'yank url',
      '<d>': 'yank all download',

      # history
      '<shift-f>': 'forward',
      '<shift-b>': 'back',
      '<ctrl-c><ctrl-f>': 'forward',
      '<ctrl-c><ctrl-b>': 'back',
      'shift-h>': 'history',

      # bookmarks
      'm': 'bookmark-add',
      'M': 'open qute://bookmarks',


      # tabs
      '<ctrl-tab>': 'tab-next',
      '<ctrl-shift-tab>': 'tab-prev',
      '<alt-n>': 'tab-next',
      '<shift-alt-n>': 'tab-move +',
      '<alt-p>': 'tab-prev',
      '<shift-alt-p>': 'tab-move -',
      '<ctrl-x><b>': 'set-cmd-text -s :buffer',
      '<ctrl-x><k>': 'tab-close',
      '<ctrl-c><p>': 'tab-pin',
      '<ctrl-c><m>': 'tab-mute',
      '<ctrl-x><0>': 'tab-close',
      '<ctrl-x><1>': 'tab-only',
      '<Alt-1>': 'tab-focus 1',
      '<Alt-2>': 'tab-focus 2',
      '<Alt-3>': 'tab-focus 3',
      '<Alt-4>': 'tab-focus 4',
      '<Alt-5>': 'tab-focus 5',
      '<Alt-6>': 'tab-focus 6',
      '<Alt-7>': 'tab-focus 7',
      '<Alt-8>': 'tab-focus 8',
      '<Alt-9>': 'tab-focus -1',

      # frames
      '<ctrl-x><5><0>': 'close',
      '<ctrl-x><5><1>': 'window-only',
      '<ctrl-x><5><2>': 'set-cmd-text -s :open -w',
      '<ctrl-u><ctrl-x><5><2>': 'set-cmd-text -s :open -p',


      # open links
      '<g>': 'set-cmd-text -s :open',
      '<shift-g>': 'set-cmd-text -s :open -t',

      # editing
      '<ctrl-f>': 'fake-key <Right>',
      '<ctrl-b>': 'fake-key <Left>',
      '<ctrl-a>': 'fake-key <Home>',
      '<ctrl-e>': 'fake-key <End>',
      '<ctrl-n>': 'fake-key <Down>',
      '<ctrl-p>': 'fake-key <Up>',
      '<alt-f>': 'fake-key <Ctrl-Right>',
      '<alt-b>': 'fake-key <Ctrl-Left>',
      '<ctrl-d>': 'fake-key <Delete>',
      '<alt-d>': 'fake-key <Ctrl-Delete>',
      '<alt-backspace>': 'fake-key <Ctrl-Backspace>',
      '<ctrl-w>': 'fake-key <Ctrl-backspace>',
      '<ctrl-y>': 'insert-text {primary}',

      # Numbers
      # https://github.com/qutebrowser/qutebrowser/issues/4213
      '1': 'fake-key 1',
      '2': 'fake-key 2',
      '3': 'fake-key 3',
      '4': 'fake-key 4',
      '5': 'fake-key 5',
      '6': 'fake-key 6',
      '7': 'fake-key 7',
      '8': 'fake-key 8',
      '9': 'fake-key 9',
      '0': 'fake-key 0',

      # misc
      '<ctrl-c><v>': 'spawn --userscript ~/.bin/open_in_mpv.sh',


      # Help
      '<ctrl-h><b>': 'open qute://bindings',
      '<ctrl-h><h>': 'set-cmd-text -s :help',
      # escape hatch
      '<ctrl-g>': ESC_BIND,
  }

  c.bindings.commands['command'] = {
      '<ctrl-s>': 'search-next',
      '<ctrl-r>': 'search-prev',

      '<ctrl-p>': 'completion-item-focus prev',
      '<ctrl-n>': 'completion-item-focus next',

      '<alt-p>': 'command-history-prev',
      '<alt-n>': 'command-history-next',

      # escape hatch
      '<ctrl-g>': ESC_BIND,
      #'<ctrl-g>': 'leave-mode',
  }

  c.bindings.commands['hint'] = {
      # escape hatch
      '<ctrl-g>': ESC_BIND,
      #'<ctrl-g>': 'leave-mode',
  }


  c.bindings.commands['caret'] = {
      # escape hatch
      '<ctrl-g>': ESC_BIND,
      #'<ctrl-g>': 'leave-mode',
  }

  c.bindings.commands['insert'] = {
      # editing
      '<ctrl-f>': 'fake-key <Right>',
      '<ctrl-b>': 'fake-key <Left>',
      '<ctrl-a>': 'fake-key <Home>',
      '<ctrl-e>': 'fake-key <End>',
      '<ctrl-n>': 'fake-key <Down>',
      '<ctrl-p>': 'fake-key <Up>',
      '<alt-f>': 'fake-key <Ctrl-Right>',
      '<alt-b>': 'fake-key <Ctrl-Left>',
      '<ctrl-d>': 'fake-key <Delete>',
      '<alt-d>': 'fake-key <Ctrl-Delete>',
      '<alt-backspace>': 'fake-key <Ctrl-Backspace>',
      '<ctrl-w>': 'fake-key <Ctrl-backspace>',
      '<ctrl-y>': 'insert-text {primary}',
      '<ctrl-g>': ESC_BIND
      #'<ctrl-g>': 'leave-mode'

  }
#+end_src

* Sway

#+begin_src conf-unix
  # Default config for sway
  #
  # Copy this to ~/.config/sway/config and edit it to your liking.
  #
  # Read `man 5 sway` for a complete reference.

  ### Variables
  #
  # Logo key. Use Mod1 for Alt.
  set $mod Mod4
  # Home row direction keys, like vim
  set $left h
  set $down j
  set $up k
  set $right l
  # Your preferred terminal emulator
  set $term alacritty
  # Your preferred application launcher
  # Note: pass the final command to swaymsg so that the resulting window can be opened
  # on the original workspace that the command was run on.
  #set $menu dmenu_path | dmenu | xargs swaymsg exec --

  # Example from https://gist.github.com/Mel34/ab9b6d562f9181ed8bbdc7c76022b85b
  #set $menu bemenu-run --fn $uifont -b -p "â–¶" --tf "$prompt" --hf "$highlight" --sf "$highlight" --scf "$highlight" | xargs swaymsg exec
  for_window [app_id="^launcher$"] floating enable, sticky enable, resize set 30 ppt 60 ppt, border pixel 10
  set $menu exec $term --class=launcher -e /usr/bin/sway-launcher-desktop
  bindsym $mod+d exec $menu


  ### Output configuration
  #
  # Default wallpaper (more resolutions are available in /usr/local/share/backgrounds/sway/)
  #output "*" background /usr/local/share/backgrounds/sway/Sway_Wallpaper_Blue_2048x1536.png fill
  #output * bg /usr/local/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill
  #output * bg /usr/local/share/backgrounds/arch-bg-1.jpg fill
  #output * bg #FFFFFF solid_color
  #
  # Example configuration:
  #
  #   output HDMI-A-1 resolution 1920x1080 position 1920,0
  #
  # You can get the names of your outputs by running: swaymsg -t get_outputs

  output eDP-1 resolution 3840x2160 position 0,0
  output eDP-1 scale 1

  output HDMI-A-2 resolution 1920x1200 position -1920,0
  output HDMI-A-2 scale 1


  ### Idle configuration
  #
  # Example configuration:
  #
  # exec swayidle -w \
  #          timeout 300 'swaylock -f -c 000000' \
  #          timeout 600 'swaymsg "output * dpms off"' \
  #               resume 'swaymsg "output * dpms on"' \
  #          before-sleep 'swaylock -f -c 000000'
  #
  # This will lock your screen after 300 seconds of inactivity, then turn off
  # your displays after another 300 seconds, and turn your screens back on when
  # resumed. It will also lock your screen before your computer goes to sleep.

  ### Input configuration
  #
  # Example configuration:
  #
  #   input "2:14:SynPS/2_Synaptics_TouchPad" {
  #       dwt enabled
  #       tap enabled
  #       natural_scroll enabled
  #       middle_emulation enabled
  #   }
  #
  # You can get the names of your inputs by running: swaymsg -t get_inputs
  # Read `man 5 sway-input` for more information about this section.
  input type:keyboard {
  xkb_options ctrl:nocaps
  }

  input type:touchpad {
  pointer_accel 1.0
  }

  input type:pointer {
  pointer_accel 1.0
  }

  ### Key bindings
  #
  # Basics:
  #
  # Start a terminal
  bindsym $mod+Return exec $term

  # Kill focused window
  bindsym $mod+Shift+q kill

  # Start your launcher
  # bindsym $mod+d exec $menu

  # Drag floating windows by holding down $mod and left mouse button.
  # Resize them with right mouse button + $mod.
  # Despite the name, also works for non-floating windows.
  # Change normal to inverse to use left mouse button for resizing and right
  # mouse button for dragging.
  floating_modifier $mod normal

  # Reload the configuration file
  bindsym $mod+Shift+c reload

  ## From https://gitlab.com/protesilaos/dotfiles/-/blob/master/sway/.config/sway/config
  # # NOTE 2021-09-22: This was the default.  I have no idea why a
  # # keyboard-centric WM would expect you to use the mouse for such a
  # # task.
  # bindsym $mod+Delete exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'

  set $quit "Exit Sway: [l]ogout, [r]eboot, [s]hutdown, s[u]spend, h[i]bernate-to-windows"

  mode $quit {
  bindsym l exec swaymsg exit
  bindsym r exec systemctl reboot
  bindsym s exec systemctl poweroff
  bindsym u exec systemctl suspend
  bindsym i exec systemctl hibernate --boot-loader-entry=auto-windows

  Bindsym Escape mode "default"
  bindsym Return mode "default"
  }

  bindsym $mod+Delete mode $quit

  #
  # Moving around:
  #
  # Move your focus around
  bindsym $mod+$left focus left
  bindsym $mod+$down focus down
  bindsym $mod+$up focus up
  bindsym $mod+$right focus right
  # Or use $mod+[up|down|left|right]
  bindsym $mod+Left focus left
  bindsym $mod+Down focus down
  bindsym $mod+Up focus up
  bindsym $mod+Right focus right

  # Or some emacs keys
  bindsym $mod+f focus right
  # Move the focused window with the same, but add Shift
  bindsym $mod+Shift+$left move left
  bindsym $mod+Shift+$down move down
  bindsym $mod+Shift+$up move up
  bindsym $mod+Shift+$right move right
  # Ditto, with arrow keys
  bindsym $mod+Shift+Left move left
  bindsym $mod+Shift+Down move down
  bindsym $mod+Shift+Up move up
  bindsym $mod+Shift+Right move right


  #
  # Workspaces:
  #
  # Switch to workspace
  bindsym $mod+1 workspace 1
  bindsym $mod+2 workspace 2
  bindsym $mod+3 workspace 3
  bindsym $mod+4 workspace 4
  bindsym $mod+5 workspace 5
  bindsym $mod+6 workspace 6
  bindsym $mod+7 workspace 7
  bindsym $mod+8 workspace 8
  bindsym $mod+9 workspace 9
  bindsym $mod+0 workspace 10
  # Move focused container to workspace
  bindsym $mod+Shift+1 move container to workspace 1
  bindsym $mod+Shift+2 move container to workspace 2
  bindsym $mod+Shift+3 move container to workspace 3
  bindsym $mod+Shift+4 move container to workspace 4
  bindsym $mod+Shift+5 move container to workspace 5
  bindsym $mod+Shift+6 move container to workspace 6
  bindsym $mod+Shift+7 move container to workspace 7
  bindsym $mod+Shift+8 move container to workspace 8
  bindsym $mod+Shift+9 move container to workspace 9
  bindsym $mod+Shift+0 move container to workspace 10

  ## https://gitlab.com/protesilaos/dotfiles/-/blob/master/sway/.config/sway/config
  #### Workspaces
  bindsym $mod+Tab workspace next
  bindsym $mod+Shift+Tab workspace prev

  # Note: workspaces can have any name you want, not just numbers.
  # We just use 1-10 as the default.
  #
  # Layout stuff:
  #
  # You can "split" the current object of your focus with
  # $mod+b or $mod+v, for horizontal and vertical splits
  # respectively.
  bindsym $mod+b splith
  bindsym $mod+v splitv

  # Switch the current container between different layout styles
  bindsym $mod+s layout stacking
  bindsym $mod+w layout tabbed
  bindsym $mod+e layout toggle split

  # Make the current focus fullscreen
  # bindsym $mod+f fullscreen
  bindsym $mod+Shift+f11 fullscreen

  # Toggle the current focus between tiling and floating mode
  bindsym $mod+Shift+space floating toggle

  # Swap focus between the tiling area and the floating area
  bindsym $mod+space focus mode_toggle

  # Move focus to the parent container
  bindsym $mod+a focus parent
  #
  # Scratchpad:
  #
  # Sway has a "scratchpad", which is a bag of holding for windows.
  # You can send windows there and get them back later.

  # Move the currently focused window to the scratchpad
  bindsym $mod+Shift+minus move scratchpad

  # Show the next scratchpad window or hide the focused scratchpad window.
  # If there are multiple scratchpad windows, this command cycles through them.
  bindsym $mod+minus scratchpad show
  # Mod+`
  bindsym $mod+grave scratchpad show
  #
  # Resizing containers:
  #
  mode "resize" {
  # left will shrink the containers width
  # right will grow the containers width
  # up will shrink the containers height
  # down will grow the containers height
  bindsym $left resize shrink width 20px
  bindsym $down resize grow height 20px
  bindsym $up resize shrink height 20px
  bindsym $right resize grow width 20px

  # Ditto, with arrow keys
  bindsym Left resize shrink width 20px
  bindsym Down resize grow height 20px
  bindsym Up resize shrink height 20px
  bindsym Right resize grow width 20px

  # Return to default mode
  bindsym Return mode "default"
  bindsym Escape mode "default"
  }
  bindsym $mod+r mode "resize"

  #
  # Status Bar:
  #
  # Read `man 5 sway-bar` for more information about this section.
  bar {
  position top

  # When the status_command prints a new line to stdout, swaybar updates.
  # The default just shows the current date and time.
  #status_command while date +'%Y-%m-%d %l:%M:%S %p'; do sleep 1; done

  # Keep in mind that the current directory of this config file is $HOME
  status_command while ~/.config/sway/status.sh; do sleep 1; done

  colors {
  statusline #ffffff
  background #323232
  inactive_workspace #32323200 #32323200 #5c5c5c
  }

  font pango:DejaVu Sans Mono 12
  }

  include /usr/local/etc/sway/config.d/*

  #
  # Screenshot
  #
  bindsym $mod+Shift+p exec grim -g "$(slurp)" -t png - | wl-copy -t image/png
  bindsym $mod+Shift+o exec grim -g "$(slurp)" -t png - | swappy -f -

  # Gaps
  # These set the defaults, use swaymsg gaps to set it at runtime
  gaps inner 0
  gaps outer 0
  smart_gaps off

  # Mako
  exec mako
#+end_src

* Omnisharp

#+begin_src json :tangle ~/.omnisharp/omnisharp.json
  {
          "useGlobalMono": false
  }
#+end_src

* Chrome Flags

Used by xdg open and //usr/bin/google-chrome-stable scripts

See [[file:~/projects/me/todo_misc.org::*Linux/Chrome-Emacs(?): Figure out why chrome opens up 2 unnecessary tabs][Linux/Chrome-Emacs(?): Figure out why chrome opens up 2 unnecessary tabs]]

#+begin_src shell :tangle ~/.config/chrome-flags.conf
  -enable-features=UseOzonePlatform -ozone-platform=wayland
#+end_src

* Goddard SNX

** snx.sh scripts

#+begin_src shell :tangle ~/goddard-vpn-connect-snx.sh
  #!/usr/bin/env bash
  sudo snx -s vpn.goddardsystems.com -u parsus-ta
#+end_src


** snxrc
#+begin_src shell :tangle ~/.snxrc
  debug yes
  # This was an update because the original vpn server broke
  server 199.116.133.75
  username parsus-ta
#+end_src

* Local environment

Added a source to a ~/local_env.sh script in zsh.  For putting local configuration

Put configuration for kestrel on local machine in there.  For example:
#+begin_src sh
  #dotnet/kestrel
  export "Kestrel__Endpoints__Https__Certificate__Path"="/home/trevor/ca/localhost.pfx"
  export "Kestrel__Endpoints__Https__Certificate__Password"="<cert_pw>"
#+end_src

* Davfs2

Used for dotcms mounting webdav dirs

sudo file tangled in /etc/davfs2/davfs2.conf
#+begin_src conf
        
  # davfs2 configuration file 2020-08-03
  # version 13
  # ------------------------------------

  # Copyright (C) 2006, 2007, 2008, 2009, 2012, 2013, 2014 Werner Baumann

  # Copying and distribution of this file, with or without modification, are
  # permitted in any medium without royalty provided the copyright notice
  # and this notice are preserved.


  # Please read the davfs2.conf (5) man page for a description of the
  # configuration options and syntax rules.


  # Available options and default values
  # ====================================

  # General Options
  # ---------------

  # dav_user        davfs2            # system wide config file only
  # dav_group       davfs2            # system wide config file only
  # buf_size        16                 # KiByte

  # WebDAV Related Options
  # ----------------------

  # use_proxy       1                 # system wide config file only
  # proxy                             # system wide config file only
  # trust_ca_cert
  # servercert                        # deprecated: use trust_ca_cert
  # trust_server_cert
  # clientcert
  # secrets         ~/.davfs2/secrets # user config file only
  # ask_auth        1
  # use_locks       1

  # lock_owner      <user-name>
  # lock_timeout    1800              # seconds
  # lock_refresh    60                # seconds
  # use_expect100   0
  # if_match_bug    0
  # drop_weak_etags 0
  # n_cookies       0
  # precheck        1
  # ignore_dav_header 0
  # use_compression 0
  # min_propset     0
  # follow_redirect 0
  # sharepoint_href_bug 0
  # server_charset
  # connect_timeout 10                # seconds
  # read_timeout    30                # seconds
  # retry           30                # seconds
  # max_retry       300               # seconds
  # add_header

  # Cache Related Options
  # ---------------------

  # backup_dir      lost+found
  # cache_dir       /var/cache/davfs2 # system wide cache
  #                 ~/.davfs2/cache   # per user cache
  # cache_size      50                # MiByte
  # table_size      1024
  # dir_refresh     60                # seconds
  # file_refresh    1                 # second
  # delay_upload    10
  # gui_optimize    0
  # minimize_mem    0

  # Debugging Options
  # -----------------

  # debug           # possible values: config, kernel, cache, http, xml,
                    #      httpauth, locks, ssl, httpbody, secrets, most

  # Custom Set Options
  # ------------------
  delay_upload    0
  if_match_bug    1
  use_locks       0

#+end_src

webdav secrets /etc/davfs2/secrets
#+begin_src conf
  # davfs2 secrets file  2009-10-18
  # version 4
  # -------------------------------

  # Copyright (C) 2006, 2007, 2008, 2009 Werner Baumann

  # Copying and distribution of this file, with or without modification, are
  # permitted in any medium without royalty provided the copyright notice
  # and this notice are preserved.


  # # This file must be readable and writeable by the owner only (mode 0600).

  # This file contains user-name and password for the proxy, the
  # WebDAV resources and decryption passwords for client certificates.

  # Comments are indicated by a '#' character and the rest of the line
  # is ignored. Empty lines are ignored too.

  # Each line consists of two or three items separated by spaces or tabs.
  # If an item contains one of the characters space, tab, #, \ or ", this
  # character must be escaped by a preceding \. Alternatively, the item
  # may be enclosed in double quotes. (see also the davfs2.conf (5) man page)


  # Proxy Line
  # ----------
  # A proxy line consists of the fully qualified domain name of the proxy,
  # the user-name and the password. The proxy name must not contain a scheme
  # or path segment, but a port number should be added, separated by a colon.
  # The password my be omitted.
  # Instead of the name of the proxy, the keyword "proxy" may be used.

  # Examples
  # foo.bar:3245                  otto          my\ secret
  # foo.bar                       otto          "my secret"
  # proxy                         otto          "my secret"

  # Credential Line
  # ---------------
  # A credential line consists of the mount-point, the user-name and
  # the password. The mount-point must be an absolute path, starting
  # with /. The password may be omitted.
  # For compatibility with older versions, instead of the mount-point
  # the URL may be given. The URL must contain scheme, fully qualified
  # domain name and path. If the path segment is missing, / is assumed.

  # Examples
  # /home/otto/foo                otto          g3H\"x\ 7z\\
  # /media/dav/bar                otto          geheim
  # Old style
  # "http://foo.bar/my documents" otto          "geh # heim"
  # https://foo.bar:333/dav       otto          geh\ \#\ heim

  # ESA DotCMS Credentials
  http://localhost:8080/webdav/live/1 admin@dotcms.com "admin"
  https://demo.dotcms.com/webdav/live/1 admin@dotcms.com "admin"
  https://***REMOVED***/webdav/live/1 ***REMOVED*** "<to-be-replaced>"
  https://***REMOVED***/webdav/live/1 ***REMOVED*** "<to-be-replaced>"
  https://***REMOVED***/webdav/live/1 ***REMOVED*** "<to-be-replaced>"

  # Password for Client Certificate
  # -------------------------------
  # It must contain the name of the certificate file and the encryption
  # password. The name must be either absolute (starting with /) or the
  # file-name only. If it is not absolute, it is assumed to be in the
  # standard directory for client certificates.

  # Examples
  # /home/otto/.davfs2/certs/private/otto.crt  geheim
  # otto_private.crt              "this is extraordinary secret"
  # "otto private.crt"            this\ is\ secret,\ too.
#+end_src

* EXWM/.xinitrc

#+begin_src conf :tangle ~/.xinitrc
  # Use caps as ctrl
  setxkbmap -option ctrl:nocaps

  # Disable access control for the current user.
  xhost +SI:localuser:$USER

  # Make Java applications aware this is a non-reparenting window manager.
  export _JAVA_AWT_WM_NONREPARENTING=1

  # Set default cursor.
  xsetroot -cursor_name left_ptr

  # Set keyboard repeat rate.
  xset r rate 200 60
  xset b off

  xinput --set-prop "Synaptics TM3276-031" "libinput Accel Speed" 1
  xinput --set-prop "TPPS/2 IBM TrackPoint" "libinput Accel Speed" 1

  # Uncomment the following block to use the exwm-xim module.
  #export XMODIFIERS=@im=exwm-xim
  #export GTK_IM_MODULE=xim
  #export QT_IM_MODULE=xim
  #export CLUTTER_IM_MODULE=xim

  # Finally start with exwm enabled
  #exec emacs -mm
  exec emacs -mm --debug-init

  #exec fluxbox

#+end_src
